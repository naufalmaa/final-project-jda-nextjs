// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  SUPERADMIN
  SCHOOL_ADMIN
  USER
}

model User {
  id              String    @id @default(cuid())
  name            String?
  email           String    @unique
  emailVerified   DateTime?
  hashedPassword  String
  image           String?
  role            Role      @default(USER)
  twoFASecret     String?
  twoFAEnabled    Boolean   @default(false)

  // untuk NextAuth adapter
  accounts        Account[]
  sessions        Session[]

  // relasi ke review / sekolah
  reviews         Review[]

  // jika perlu: schools untuk admin sekolah
  schoolsManaged  School[]
}

model School {
  id         Int      @id @default(autoincrement())
  name       String
  status     String
  npsn       String
  bentuk     String
  telp       String
  alamat     String
  kelurahan  String
  kecamatan  String
  lat        Float?   // nullable
  lng        Float?   // nullable
  
    // New editable fields:
  description   String?  @db.Text
  programs      String?  @db.Text
  achievements  String?  @db.Text
  website       String?
  contact       String?

  reviews       Review[]
  admins         User[]
}

model Review {
  id            Int      @id @default(autoincrement())
  schoolId      Int
  name          String
  role          String
  biaya         String
  komentar      String
  tanggal       DateTime @default(now())

  // Rating Parameters
  kenyamanan    Int
  pembelajaran  Int
  fasilitas     Int
  kepemimpinan  Int

  userId        String?

  school        School   @relation(fields: [schoolId], references: [id])
  user          User?     @relation(fields: [userId], references: [id])
}

model Account {
  id                 Int      @id @default(autoincrement())
  userId             String   @map("user_id")
  type               String
  provider           String
  providerAccountId  String   @map("provider_account_id")
  refresh_token      String?  @map("refresh_token")
  access_token       String?  @map("access_token")
  expires_at         Int?     @map("expires_at")
  token_type         String?  @map("token_type")
  scope              String?
  id_token           String?  @map("id_token")
  session_state      String?  @map("session_state")
  oauth_token_secret String?  @map("oauth_token_secret")
  oauth_token        String?  @map("oauth_token")

  user               User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@map("verification_tokens")
}